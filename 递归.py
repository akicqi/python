# 递归：调用函数本身
# 大问题通过小问题求解

def p(n):
	if n == 1 or n == 0:
		return 1     # 递归出口
	else:
		return n * p(n-1)  # 递归条件

n = input("请输入一个整数")
print n,"!的值为：",p(n)

# 循环方法求解斐波那契数列

def fib(n):
	if n == 1 or n == 2:
		return 1
	else:
		i = 2
		f1 = 1
		f2 = 2
		while(i < n):
			f3 = f1 + f2
			f1 = f2
			f2 = f3
			i = i + 1
		return f3
		
# 使用递归的方法
def fib(n):
	if n == 1 or n == 2:
		return 1 
	else:
		return fib(n-1) + fib(n-2)
n = input(" 请输入一个整数")
print fib(n)

# 递归就是在过程或者函数里调用自身
# 在使用递归策略时，必须有一个明确的递归结束条件，称为递归出口
# 理论上所有递推函数都可以写成循环的方式，但循环逻辑不够递推清晰
# 使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。可以试试计算 fact(10000)。